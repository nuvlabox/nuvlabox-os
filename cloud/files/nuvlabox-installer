#!/bin/bash -x

set -e

trigger_file="nuvlabox-installation-trigger-usb.nuvla"
nuvlabox_local_dir="/opt/nuvlabox"
gpg_pubkey="${nuvlabox_local_dir}/gpg_pubkey.bin"
LOG_FILE='/var/log/nuvlabox-installer.log'
DEF_MODS='"docker-compose.yml"'

logger (){
	date +"%F %T | PID $$ | $0: $*" | tee -a "${LOG_FILE}"
}

log() {
  # logging wrapper
  # $1 is the custom log message
  # $2 is a wall message sent to all logged users

  echo "NuvlaBox installer: ${1}"
  logger "NuvlaBox installer: ${1}"

  if [ ! -z "${2}" ]
  then
    wall "${2}"
  fi
}

get_default_gateway_interface() {
  ip route show default 0.0.0.0/0 | awk '/default/ {print $5}'
}

download_nuvlabox_installer() {
  # fetches the latest NuvlaBox installer script from upstream
  # $1 is the download URL for the installation script
  # $2 is the path where to store the installer
  url="${1}"
  store_at="${2}"
  log "Downloading latest NuvlaBox installer from upstream at ${url}"
  wget --no-check-certificate "${url}" -O "${store_at}"
}

install_nuvlabox() {
  context="${1}"
  log "Installing NuvlaBox Engine"
  nuvlabox_installer_url="$(echo ${context} | jq -r .script)"

  nuvlabox_installer_file="/tmp/nuvlabox.installer.$(date +'%s')"
  nuvlabox_installer_file_gpg="${nuvlabox_installer_file}.gpg"
  download_nuvlabox_installer "${nuvlabox_installer_url}" "$([ -z "${NB_INSTALLER_SKIP_GPG+x}" ] && echo ${nuvlabox_installer_file_gpg} || echo ${nuvlabox_installer_file})"

  if [ $? -ne 0 ]; then
    log "ERR: unable to download NuvlaBox installer ${nuvlabox_installer_url}"
    exit 1
  fi

  if [ -z "$NB_INSTALLER_SKIP_GPG" ]; then
    gpg --batch --keyring "${gpg_pubkey}" --no-default-keyring --verify "${nuvlabox_installer_file_gpg}"
    if [ $? -ne 0 ]; then
      log "ERR: GPG signature verification of ${nuvlabox_installer_file_gpg} failed"
      rm -f "${nuvlabox_installer_file}"
      exit 1
    fi

    gpg --batch --keyring "${gpg_pubkey}" --no-default-keyring --output "${nuvlabox_installer_file}" --decrypt "${nuvlabox_installer_file_gpg}"
    if [ $? -ne 0 ]; then
      log "ERR: GPG file extraction failed"
      exit 1
    fi
  else
    log "WARN: ignoring GPG signature verification"
  fi

  chmod +x "${nuvlabox_installer_file}"
  log "Launching NuvlaBox installer ${nuvlabox_installer_file} ..."

  "${nuvlabox_installer_file}" --nuvlabox-installation-trigger-json "${context}" \
                               --nuvlabox-installation-dir "${nuvlabox_local_dir}/installation"

  if [ $? -eq 0 ]
  then
    log "NuvlaBox Engine successfully installed"
  else
    log "Failed to install NuvlaBox with ${context}"
    exit 1
  fi
}

enable_swarm_mode() {
  swarm_init_args="--cert-expiry 26280h"
  docker swarm init $swarm_init_args \
  || docker swarm init $swarm_init_args --advertise-addr "$(get_default_gateway_interface)" \
  || true
}


log "Install NuvlaBox Engine"

enable_swarm_mode

nuvlabox_context=$(cat <<END
{
  "name": "${NB_NAME:-NuvlaBox Cloud OS}",
  "description": "${NB_DESCRIPTION:-NuvlaBox Cloud OS autoinstall}",
  "version": "${NB_VERSION:-2.1.1}",
  "endpoint": "${NUVLA_ENDPOINT:-https://nuvla.io}",
  "vpn": "${NUVLA_VPN_IS-infrastructure-service/eb8e09c2-8387-4f6d-86a4-ff5ddf3d07d7}",
  "script": "${NUVLA_REG:-https://nuvla.io/ui/downloads/nuvlabox-self-registration.py.gpg}",
  "apikey": "${NB_API_KEY}",
  "apisecret": "${NB_API_SECRET}",
  "environment": {
    "HOME": "${USER_HOME:-/root}",
    "SKIP_MINIMUM_REQUIREMENTS": "${NB_SKIP_MIN_REQS:-true}"
  },
  "ssh": {
    "public-keys": [
      "${NB_SSH_PUBLIC_KEY}"
    ]
  },
  "assets": [
    ${NB_MODULES:-"${DEF_MODS}"}
  ]
}
END
)

install_nuvlabox "${NB_CONTEXT:-$nuvlabox_context}"
